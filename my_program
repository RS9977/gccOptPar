	.file	"test.c"
	.text
	.section	.rodata.str1.8,"aMS",@progbits,1
	.align 8
.LC0:
	.string	"Employee database is full. Cannot add more employees."
	.align 8
.LC1:
	.string	"Enter employee name, age, and salary (e.g., John 30 50000.00): "
	.section	.rodata.str1.1,"aMS",@progbits,1
.LC2:
	.string	" %s %d %lf"
	.section	.rodata.str1.8
	.align 8
.LC3:
	.string	"Invalid input. Please try again: "
	.section	.rodata.str1.1
.LC4:
	.string	"Employee added successfully!"
	.text
	.p2align 4
	.globl	addEmployee
	.type	addEmployee, @function
addEmployee:
.LFB51:
	.cfi_startproc
	endbr64
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$312, %rsp
	.cfi_def_cfa_offset 368
	movq	%fs:40, %rax
	movq	%rax, 296(%rsp)
	movl	(%rsi), %eax
	cmpl	$99, %eax
	jg	.L12
	addl	$1, %eax
	movq	%rdi, %rbp
	movq	%rsi, %rbx
	movl	$1, %edi
	leaq	.LC1(%rip), %rsi
	movl	%eax, 16(%rsp)
	xorl	%eax, %eax
	leaq	280(%rsp), %r15
	call	__printf_chk@PLT
	leaq	16(%rsp), %rax
	leaq	276(%rsp), %r14
	movq	%rax, 8(%rsp)
	leaq	20(%rsp), %r13
	leaq	.LC2(%rip), %r12
.L6:
	xorl	%eax, %eax
	movq	%r15, %rcx
	movq	%r14, %rdx
	movq	%r13, %rsi
	movq	%r12, %rdi
	call	__isoc99_scanf@PLT
	cmpl	$3, %eax
	jne	.L13
	movslq	(%rbx), %rax
	movl	$34, %ecx
	movq	8(%rsp), %rsi
	movq	%rax, %rdi
	salq	$4, %rdi
	addq	%rax, %rdi
	salq	$4, %rdi
	addq	%rdi, %rbp
	movq	%rbp, %rdi
	rep movsq
	leaq	.LC4(%rip), %rdi
	addl	$1, (%rbx)
	call	puts@PLT
	movq	296(%rsp), %rax
	subq	%fs:40, %rax
	jne	.L10
	addq	$312, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L12:
	.cfi_restore_state
	movq	296(%rsp), %rax
	subq	%fs:40, %rax
	jne	.L10
	addq	$312, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	leaq	.LC0(%rip), %rdi
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmp	puts@PLT
	.p2align 4,,10
	.p2align 3
.L13:
	.cfi_restore_state
	leaq	.LC3(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	__printf_chk@PLT
.L5:
	movq	stdin(%rip), %rdi
	call	getc@PLT
	cmpl	$10, %eax
	jne	.L5
	jmp	.L6
	.p2align 4,,10
	.p2align 3
.L10:
	call	__stack_chk_fail@PLT
	.cfi_endproc
.LFE51:
	.size	addEmployee, .-addEmployee
	.section	.rodata.str1.1
.LC5:
	.string	"Employee List:"
.LC6:
	.string	"ID: %d\n"
.LC7:
	.string	"Name: %s\n"
.LC8:
	.string	"Age: %d\n"
.LC9:
	.string	"Salary: %.2lf\n"
.LC10:
	.string	"----------------------------"
	.text
	.p2align 4
	.globl	displayEmployees
	.type	displayEmployees, @function
displayEmployees:
.LFB52:
	.cfi_startproc
	endbr64
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	movq	%rdi, %rbp
	leaq	.LC5(%rip), %rdi
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	movl	%esi, %ebx
	subq	$24, %rsp
	.cfi_def_cfa_offset 80
	call	puts@PLT
	testl	%ebx, %ebx
	jle	.L14
	leal	-1(%rbx), %edx
	leaq	4(%rbp), %r15
	movq	%rdx, %rax
	leaq	.LC6(%rip), %r14
	leaq	.LC7(%rip), %r13
	salq	$4, %rax
	leaq	.LC8(%rip), %r12
	leaq	.LC10(%rip), %rbx
	addq	%rdx, %rax
	salq	$4, %rax
	leaq	276(%rbp,%rax), %rax
	leaq	.LC9(%rip), %rbp
	movq	%rax, 8(%rsp)
.L16:
	movl	-4(%r15), %edx
	movq	%r14, %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	__printf_chk@PLT
	movq	%r15, %rdx
	movq	%r13, %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	addq	$272, %r15
	call	__printf_chk@PLT
	movl	-16(%r15), %edx
	movq	%r12, %rsi
	xorl	%eax, %eax
	movl	$1, %edi
	call	__printf_chk@PLT
	movsd	-12(%r15), %xmm0
	movq	%rbp, %rsi
	movl	$1, %edi
	movl	$1, %eax
	call	__printf_chk@PLT
	movq	%rbx, %rdi
	call	puts@PLT
	cmpq	8(%rsp), %r15
	jne	.L16
.L14:
	addq	$24, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE52:
	.size	displayEmployees, .-displayEmployees
	.section	.rodata.str1.8
	.align 8
.LC11:
	.string	"Enter the ID of the employee to search for: "
	.section	.rodata.str1.1
.LC12:
	.string	"%d"
	.section	.rodata.str1.8
	.align 8
.LC13:
	.string	"Invalid input. Please enter a valid ID: "
	.section	.rodata.str1.1
.LC14:
	.string	"Employee Found:"
	.section	.rodata.str1.8
	.align 8
.LC15:
	.string	"Employee with ID %d not found.\n"
	.text
	.p2align 4
	.globl	searchEmployee
	.type	searchEmployee, @function
searchEmployee:
.LFB53:
	.cfi_startproc
	endbr64
	pushq	%r14
	.cfi_def_cfa_offset 16
	.cfi_offset 14, -16
	leaq	.LC13(%rip), %r14
	pushq	%r13
	.cfi_def_cfa_offset 24
	.cfi_offset 13, -24
	pushq	%r12
	.cfi_def_cfa_offset 32
	.cfi_offset 12, -32
	leaq	.LC12(%rip), %r12
	pushq	%rbp
	.cfi_def_cfa_offset 40
	.cfi_offset 6, -40
	movl	%esi, %ebp
	leaq	.LC11(%rip), %rsi
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset 3, -48
	movq	%rdi, %rbx
	movl	$1, %edi
	subq	$16, %rsp
	.cfi_def_cfa_offset 64
	movq	%fs:40, %rax
	movq	%rax, 8(%rsp)
	xorl	%eax, %eax
	leaq	4(%rsp), %r13
	call	__printf_chk@PLT
.L24:
	xorl	%eax, %eax
	movq	%r13, %rsi
	movq	%r12, %rdi
	call	__isoc99_scanf@PLT
	cmpl	$1, %eax
	jne	.L20
	movl	4(%rsp), %edx
	testl	%ebp, %ebp
	jle	.L22
	leal	-1(%rbp), %ecx
	movq	%rcx, %rax
	salq	$4, %rax
	addq	%rcx, %rax
	salq	$4, %rax
	leaq	272(%rbx,%rax), %rax
	jmp	.L27
	.p2align 4,,10
	.p2align 3
.L25:
	addq	$272, %rbx
	cmpq	%rax, %rbx
	je	.L22
.L27:
	cmpl	%edx, (%rbx)
	jne	.L25
	leaq	.LC14(%rip), %rdi
	call	puts@PLT
	movl	(%rbx), %edx
	leaq	.LC6(%rip), %rsi
	xorl	%eax, %eax
	movl	$1, %edi
	call	__printf_chk@PLT
	leaq	4(%rbx), %rdx
	movl	$1, %edi
	xorl	%eax, %eax
	leaq	.LC7(%rip), %rsi
	call	__printf_chk@PLT
	movl	260(%rbx), %edx
	leaq	.LC8(%rip), %rsi
	xorl	%eax, %eax
	movl	$1, %edi
	call	__printf_chk@PLT
	movl	$1, %edi
	movl	$1, %eax
	movsd	264(%rbx), %xmm0
	leaq	.LC9(%rip), %rsi
	call	__printf_chk@PLT
	jmp	.L19
	.p2align 4,,10
	.p2align 3
.L22:
	leaq	.LC15(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	__printf_chk@PLT
.L19:
	movq	8(%rsp), %rax
	subq	%fs:40, %rax
	jne	.L32
	addq	$16, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 48
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%rbp
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r13
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L20:
	.cfi_restore_state
	movq	%r14, %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	__printf_chk@PLT
.L23:
	movq	stdin(%rip), %rdi
	call	getc@PLT
	cmpl	$10, %eax
	jne	.L23
	jmp	.L24
	.p2align 4,,10
	.p2align 3
.L32:
	call	__stack_chk_fail@PLT
	.cfi_endproc
.LFE53:
	.size	searchEmployee, .-searchEmployee
	.section	.rodata.str1.1
.LC17:
	.string	"No employees in the database."
	.section	.rodata.str1.8
	.align 8
.LC18:
	.string	"Average Salary of Employees: %.2lf\n"
	.text
	.p2align 4
	.globl	calculateAverageSalary
	.type	calculateAverageSalary, @function
calculateAverageSalary:
.LFB54:
	.cfi_startproc
	endbr64
	testl	%esi, %esi
	je	.L34
	jle	.L39
	leal	-1(%rsi), %ecx
	leaq	264(%rdi), %rax
	pxor	%xmm0, %xmm0
	movq	%rcx, %rdx
	salq	$4, %rdx
	addq	%rcx, %rdx
	salq	$4, %rdx
	leaq	536(%rdi,%rdx), %rdx
.L37:
	addsd	(%rax), %xmm0
	addq	$272, %rax
	cmpq	%rdx, %rax
	jne	.L37
.L36:
	pxor	%xmm1, %xmm1
	movl	$1, %edi
	movl	$1, %eax
	cvtsi2sdl	%esi, %xmm1
	leaq	.LC18(%rip), %rsi
	divsd	%xmm1, %xmm0
	jmp	__printf_chk@PLT
	.p2align 4,,10
	.p2align 3
.L34:
	leaq	.LC17(%rip), %rdi
	jmp	puts@PLT
	.p2align 4,,10
	.p2align 3
.L39:
	pxor	%xmm0, %xmm0
	jmp	.L36
	.cfi_endproc
.LFE54:
	.size	calculateAverageSalary, .-calculateAverageSalary
	.section	.rodata.str1.8
	.align 8
.LC19:
	.string	"\nEmployee Management System Menu:"
	.section	.rodata.str1.1
.LC20:
	.string	"1. Add Employee"
.LC21:
	.string	"2. Display Employees"
.LC22:
	.string	"3. Search Employee"
.LC23:
	.string	"4. Calculate Average Salary"
.LC24:
	.string	"5. Exit"
.LC25:
	.string	"Enter your choice: "
	.section	.rodata.str1.8
	.align 8
.LC26:
	.string	"Invalid input. Please enter a valid choice: "
	.align 8
.LC27:
	.string	"Invalid choice. Please enter a valid choice: "
	.align 8
.LC28:
	.string	"Exiting the Employee Management System. Goodbye!"
	.section	.text.startup,"ax",@progbits
	.p2align 4
	.globl	main
	.type	main, @function
main:
.LFB55:
	.cfi_startproc
	endbr64
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$27544, %rsp
	.cfi_def_cfa_offset 27600
	movq	%fs:40, %rax
	movq	%rax, 27528(%rsp)
	xorl	%eax, %eax
	leaq	40(%rsp), %rax
	movl	$0, 12(%rsp)
	movq	%rax, 24(%rsp)
.L41:
	leaq	.LC19(%rip), %rdi
	call	puts@PLT
	leaq	.LC20(%rip), %rdi
	call	puts@PLT
	leaq	.LC21(%rip), %rdi
	call	puts@PLT
	leaq	.LC22(%rip), %rdi
	call	puts@PLT
	leaq	.LC23(%rip), %rdi
	call	puts@PLT
	leaq	.LC24(%rip), %rdi
	call	puts@PLT
	leaq	.LC25(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	__printf_chk@PLT
.L42:
	movq	24(%rsp), %rsi
	xorl	%eax, %eax
	leaq	.LC12(%rip), %rdi
	call	__isoc99_scanf@PLT
	cmpl	$1, %eax
	jne	.L78
.L43:
	movl	40(%rsp), %eax
	leal	-1(%rax), %edx
	cmpl	$4, %edx
	ja	.L79
	cmpl	$4, %eax
	je	.L47
	cmpl	$5, %eax
	je	.L48
	cmpl	$2, %eax
	je	.L49
	cmpl	$3, %eax
	jne	.L80
	leaq	.LC11(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	__printf_chk@PLT
	leaq	44(%rsp), %rbx
	leaq	.LC13(%rip), %rbp
.L61:
	xorl	%eax, %eax
	movq	%rbx, %rsi
	leaq	.LC12(%rip), %rdi
	call	__isoc99_scanf@PLT
	cmpl	$1, %eax
	jne	.L57
	movl	12(%rsp), %ecx
	movl	44(%rsp), %edx
	testl	%ecx, %ecx
	je	.L59
	movl	12(%rsp), %eax
	leaq	320(%rsp), %rbx
	leal	-1(%rax), %ecx
	movq	%rcx, %rax
	salq	$4, %rax
	addq	%rcx, %rax
	salq	$4, %rax
	leaq	592(%rsp,%rax), %rax
	jmp	.L64
	.p2align 4,,10
	.p2align 3
.L62:
	addq	$272, %rbx
	cmpq	%rax, %rbx
	je	.L59
.L64:
	cmpl	%edx, (%rbx)
	jne	.L62
	leaq	.LC14(%rip), %rdi
	leaq	.LC6(%rip), %r14
	call	puts@PLT
	movl	(%rbx), %edx
	movq	%r14, %rsi
	xorl	%eax, %eax
	movl	$1, %edi
	leaq	.LC7(%rip), %r13
	leaq	.LC8(%rip), %r12
	call	__printf_chk@PLT
	leaq	4(%rbx), %rdx
	movq	%r13, %rsi
	xorl	%eax, %eax
	movl	$1, %edi
	leaq	.LC9(%rip), %rbp
	call	__printf_chk@PLT
	movl	260(%rbx), %edx
	movq	%r12, %rsi
	xorl	%eax, %eax
	movl	$1, %edi
	call	__printf_chk@PLT
	movsd	264(%rbx), %xmm0
	movq	%rbp, %rsi
	movl	$1, %edi
	movl	$1, %eax
	call	__printf_chk@PLT
	jmp	.L41
	.p2align 4,,10
	.p2align 3
.L79:
	leaq	.LC27(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	__printf_chk@PLT
	movq	24(%rsp), %rsi
	xorl	%eax, %eax
	leaq	.LC12(%rip), %rdi
	call	__isoc99_scanf@PLT
	cmpl	$1, %eax
	je	.L43
.L78:
	leaq	.LC26(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	__printf_chk@PLT
.L44:
	movq	stdin(%rip), %rdi
	call	getc@PLT
	cmpl	$10, %eax
	jne	.L44
	jmp	.L42
.L80:
	cmpl	$99, 12(%rsp)
	jg	.L81
	movl	12(%rsp), %eax
	leaq	.LC1(%rip), %rsi
	movl	$1, %edi
	leaq	312(%rsp), %r14
	leaq	308(%rsp), %r13
	leaq	52(%rsp), %r12
	leal	1(%rax), %ebx
	xorl	%eax, %eax
	leaq	.LC2(%rip), %rbp
	movl	%ebx, 48(%rsp)
	leaq	.LC3(%rip), %r15
	call	__printf_chk@PLT
	leaq	48(%rsp), %rax
	movq	%rax, 16(%rsp)
.L55:
	xorl	%eax, %eax
	movq	%r14, %rcx
	movq	%r13, %rdx
	movq	%r12, %rsi
	movq	%rbp, %rdi
	call	__isoc99_scanf@PLT
	cmpl	$3, %eax
	jne	.L82
	movslq	12(%rsp), %rax
	movl	$34, %ecx
	movq	16(%rsp), %rsi
	imulq	$272, %rax, %rax
	leaq	320(%rsp,%rax), %rax
	movq	%rax, %rdi
	rep movsq
	leaq	.LC4(%rip), %rdi
	call	puts@PLT
	movl	%ebx, 12(%rsp)
	jmp	.L41
	.p2align 4,,10
	.p2align 3
.L49:
	leaq	.LC5(%rip), %rdi
	call	puts@PLT
	movl	12(%rsp), %eax
	testl	%eax, %eax
	je	.L41
	leal	-1(%rax), %edx
	leaq	.LC9(%rip), %rbp
	movq	%rdx, %rax
	leaq	324(%rsp), %r15
	leaq	.LC6(%rip), %r14
	salq	$4, %rax
	leaq	.LC7(%rip), %r13
	leaq	.LC8(%rip), %r12
	addq	%rdx, %rax
	leaq	.LC10(%rip), %rbx
	salq	$4, %rax
	leaq	596(%rsp,%rax), %rax
	movq	%rax, 16(%rsp)
	movq	%rbp, %rax
	movq	%r15, %rbp
	movq	%rax, %r15
.L56:
	movl	-4(%rbp), %edx
	movq	%r14, %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	__printf_chk@PLT
	movq	%rbp, %rdx
	movq	%r13, %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	addq	$272, %rbp
	call	__printf_chk@PLT
	movl	-16(%rbp), %edx
	movq	%r12, %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	__printf_chk@PLT
	movsd	-12(%rbp), %xmm0
	movq	%r15, %rsi
	movl	$1, %edi
	movl	$1, %eax
	call	__printf_chk@PLT
	movq	%rbx, %rdi
	call	puts@PLT
	cmpq	%rbp, 16(%rsp)
	jne	.L56
	jmp	.L41
	.p2align 4,,10
	.p2align 3
.L48:
	leaq	.LC28(%rip), %rdi
	call	puts@PLT
	xorl	%edi, %edi
	call	exit@PLT
	.p2align 4,,10
	.p2align 3
.L47:
	movl	12(%rsp), %eax
	testl	%eax, %eax
	je	.L83
	movl	12(%rsp), %ecx
	leaq	584(%rsp), %rax
	pxor	%xmm0, %xmm0
	subl	$1, %ecx
	movq	%rcx, %rdx
	salq	$4, %rdx
	addq	%rcx, %rdx
	salq	$4, %rdx
	leaq	856(%rsp,%rdx), %rdx
.L66:
	addsd	(%rax), %xmm0
	addq	$272, %rax
	cmpq	%rdx, %rax
	jne	.L66
	pxor	%xmm1, %xmm1
	movl	$1, %edi
	movl	$1, %eax
	cvtsi2sdl	12(%rsp), %xmm1
	leaq	.LC18(%rip), %rsi
	divsd	%xmm1, %xmm0
	call	__printf_chk@PLT
	jmp	.L41
.L59:
	leaq	.LC15(%rip), %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	__printf_chk@PLT
	jmp	.L41
.L57:
	movq	%rbp, %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	__printf_chk@PLT
.L60:
	movq	stdin(%rip), %rdi
	call	getc@PLT
	cmpl	$10, %eax
	jne	.L60
	jmp	.L61
.L81:
	leaq	.LC0(%rip), %rdi
	call	puts@PLT
	jmp	.L41
.L82:
	movq	%r15, %rsi
	movl	$1, %edi
	xorl	%eax, %eax
	call	__printf_chk@PLT
.L54:
	movq	stdin(%rip), %rdi
	call	getc@PLT
	cmpl	$10, %eax
	jne	.L54
	jmp	.L55
.L83:
	leaq	.LC17(%rip), %rdi
	call	puts@PLT
	jmp	.L41
	.cfi_endproc
.LFE55:
	.size	main, .-main
	.ident	"GCC: (Ubuntu 11.3.0-1ubuntu1~22.04) 11.3.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
